THREE.GLTFLoader=function(){function GLTFLoader(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager,this.dracoLoader=null}function GLTFRegistry(){var objects={};return{get:function(key){return objects[key]},add:function(key,object){objects[key]=object},remove:function(key){delete objects[key]},removeAll:function(){objects={}}}}GLTFLoader.prototype={constructor:GLTFLoader,crossOrigin:"anonymous",load:function(url,onLoad,onProgress,onError){var scope=this,resourcePath;resourcePath=void 0!==this.resourcePath?this.resourcePath:void 0!==this.path?this.path:THREE.LoaderUtils.extractUrlBase(url),scope.manager.itemStart(url);var _onError=function(e){onError?onError(e):console.error(e),scope.manager.itemEnd(url),scope.manager.itemError(url)},loader=new THREE.FileLoader(scope.manager);loader.setPath(this.path),loader.setResponseType("arraybuffer"),loader.load(url,(function(data){try{scope.parse(data,resourcePath,(function(gltf){onLoad(gltf),scope.manager.itemEnd(url)}),_onError)}catch(e){_onError(e)}}),onProgress,_onError)},setCrossOrigin:function(value){return this.crossOrigin=value,this},setPath:function(value){return this.path=value,this},setResourcePath:function(value){return this.resourcePath=value,this},setDRACOLoader:function(dracoLoader){return this.dracoLoader=dracoLoader,this},parse:function(data,path,onLoad,onError){var content,extensions={},magic;if("string"==typeof data)content=data;else if(THREE.LoaderUtils.decodeText(new Uint8Array(data,0,4))===BINARY_EXTENSION_HEADER_MAGIC){try{extensions[EXTENSIONS.KHR_BINARY_GLTF]=new GLTFBinaryExtension(data)}catch(error){return void(onError&&onError(error))}content=extensions[EXTENSIONS.KHR_BINARY_GLTF].content}else content=THREE.LoaderUtils.decodeText(new Uint8Array(data));var json=JSON.parse(content);if(void 0===json.asset||json.asset.version[0]<2)onError&&onError(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead."));else{if(json.extensionsUsed)for(var i=0;i<json.extensionsUsed.length;++i){var extensionName=json.extensionsUsed[i],extensionsRequired=json.extensionsRequired||[];switch(extensionName){case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:extensions[extensionName]=new GLTFLightsExtension(json);break;case EXTENSIONS.KHR_MATERIALS_UNLIT:extensions[extensionName]=new GLTFMaterialsUnlitExtension(json);break;case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:extensions[extensionName]=new GLTFMaterialsPbrSpecularGlossinessExtension;break;case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:extensions[extensionName]=new GLTFDracoMeshCompressionExtension(json,this.dracoLoader);break;case EXTENSIONS.MSFT_TEXTURE_DDS:extensions[EXTENSIONS.MSFT_TEXTURE_DDS]=new GLTFTextureDDSExtension;break;default:extensionsRequired.indexOf(extensionName)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+extensionName+'".')}}var parser=new GLTFParser(json,extensions,{path:path||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager});parser.parse((function(scene,scenes,cameras,animations,json){var glTF={scene:scene,scenes:scenes,cameras:cameras,animations:animations,asset:json.asset,parser:parser,userData:{}};addUnknownExtensionsToUserData(extensions,glTF,json),onLoad(glTF)}),onError)}}};var EXTENSIONS={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function GLTFTextureDDSExtension(){if(!THREE.DDSLoader)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader");this.name=EXTENSIONS.MSFT_TEXTURE_DDS,this.ddsLoader=new THREE.DDSLoader}function GLTFLightsExtension(json){this.name=EXTENSIONS.KHR_LIGHTS_PUNCTUAL;var extension=json.extensions&&json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=extension.lights||[]}function GLTFMaterialsUnlitExtension(json){this.name=EXTENSIONS.KHR_MATERIALS_UNLIT}GLTFLightsExtension.prototype.loadLight=function(lightIndex){var lightDef=this.lightDefs[lightIndex],lightNode,color=new THREE.Color(16777215);void 0!==lightDef.color&&color.fromArray(lightDef.color);var range=void 0!==lightDef.range?lightDef.range:0;switch(lightDef.type){case"directional":(lightNode=new THREE.DirectionalLight(color)).target.position.set(0,0,-1),lightNode.add(lightNode.target);break;case"point":(lightNode=new THREE.PointLight(color)).distance=range;break;case"spot":(lightNode=new THREE.SpotLight(color)).distance=range,lightDef.spot=lightDef.spot||{},lightDef.spot.innerConeAngle=void 0!==lightDef.spot.innerConeAngle?lightDef.spot.innerConeAngle:0,lightDef.spot.outerConeAngle=void 0!==lightDef.spot.outerConeAngle?lightDef.spot.outerConeAngle:Math.PI/4,lightNode.angle=lightDef.spot.outerConeAngle,lightNode.penumbra=1-lightDef.spot.innerConeAngle/lightDef.spot.outerConeAngle,lightNode.target.position.set(0,0,-1),lightNode.add(lightNode.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+lightDef.type+'".')}return lightNode.decay=2,void 0!==lightDef.intensity&&(lightNode.intensity=lightDef.intensity),lightNode.name=lightDef.name||"light_"+lightIndex,Promise.resolve(lightNode)},GLTFMaterialsUnlitExtension.prototype.getMaterialType=function(material){return THREE.MeshBasicMaterial},GLTFMaterialsUnlitExtension.prototype.extendParams=function(materialParams,material,parser){var pending=[];materialParams.color=new THREE.Color(1,1,1),materialParams.opacity=1;var metallicRoughness=material.pbrMetallicRoughness;if(metallicRoughness){if(Array.isArray(metallicRoughness.baseColorFactor)){var array=metallicRoughness.baseColorFactor;materialParams.color.fromArray(array),materialParams.opacity=array[3]}void 0!==metallicRoughness.baseColorTexture&&pending.push(parser.assignTexture(materialParams,"map",metallicRoughness.baseColorTexture.index))}return Promise.all(pending)};var BINARY_EXTENSION_BUFFER_NAME="binary_glTF",BINARY_EXTENSION_HEADER_MAGIC="glTF",BINARY_EXTENSION_HEADER_LENGTH=12,BINARY_EXTENSION_CHUNK_TYPES_JSON=1313821514,BINARY_EXTENSION_CHUNK_TYPES_BIN=5130562;function GLTFBinaryExtension(data){this.name=EXTENSIONS.KHR_BINARY_GLTF,this.content=null,this.body=null;var headerView=new DataView(data,0,12);if(this.header={magic:THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0,4))),version:headerView.getUint32(4,!0),length:headerView.getUint32(8,!0)},this.header.magic!==BINARY_EXTENSION_HEADER_MAGIC)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.");for(var chunkView=new DataView(data,12),chunkIndex=0;chunkIndex<chunkView.byteLength;){var chunkLength=chunkView.getUint32(chunkIndex,!0);chunkIndex+=4;var chunkType=chunkView.getUint32(chunkIndex,!0);if(chunkIndex+=4,chunkType===BINARY_EXTENSION_CHUNK_TYPES_JSON){var contentArray=new Uint8Array(data,12+chunkIndex,chunkLength);this.content=THREE.LoaderUtils.decodeText(contentArray)}else if(chunkType===BINARY_EXTENSION_CHUNK_TYPES_BIN){var byteOffset=12+chunkIndex;this.body=data.slice(byteOffset,byteOffset+chunkLength)}chunkIndex+=chunkLength}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function GLTFDracoMeshCompressionExtension(json,dracoLoader){if(!dracoLoader)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=EXTENSIONS.KHR_DRACO_MESH_COMPRESSION,this.json=json,this.dracoLoader=dracoLoader}function GLTFMaterialsPbrSpecularGlossinessExtension(){return{name:EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return THREE.ShaderMaterial},extendParams:function(params,material,parser){var pbrSpecularGlossiness=material.extensions[this.name],shader=THREE.ShaderLib.standard,uniforms=THREE.UniformsUtils.clone(shader.uniforms),specularMapParsFragmentChunk=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),glossinessMapParsFragmentChunk=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),specularMapFragmentChunk=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),glossinessMapFragmentChunk=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),lightPhysicalFragmentChunk=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),fragmentShader=shader.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;").replace("uniform float metalness;","uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>",specularMapParsFragmentChunk).replace("#include <metalnessmap_pars_fragment>",glossinessMapParsFragmentChunk).replace("#include <roughnessmap_fragment>",specularMapFragmentChunk).replace("#include <metalnessmap_fragment>",glossinessMapFragmentChunk).replace("#include <lights_physical_fragment>",lightPhysicalFragmentChunk);delete uniforms.roughness,delete uniforms.metalness,delete uniforms.roughnessMap,delete uniforms.metalnessMap,uniforms.specular={value:(new THREE.Color).setHex(1118481)},uniforms.glossiness={value:.5},uniforms.specularMap={value:null},uniforms.glossinessMap={value:null},params.vertexShader=shader.vertexShader,params.fragmentShader=fragmentShader,params.uniforms=uniforms,params.defines={STANDARD:""},params.color=new THREE.Color(1,1,1),params.opacity=1;var pending=[];if(Array.isArray(pbrSpecularGlossiness.diffuseFactor)){var array=pbrSpecularGlossiness.diffuseFactor;params.color.fromArray(array),params.opacity=array[3]}if(void 0!==pbrSpecularGlossiness.diffuseTexture&&pending.push(parser.assignTexture(params,"map",pbrSpecularGlossiness.diffuseTexture.index)),params.emissive=new THREE.Color(0,0,0),params.glossiness=void 0!==pbrSpecularGlossiness.glossinessFactor?pbrSpecularGlossiness.glossinessFactor:1,params.specular=new THREE.Color(1,1,1),Array.isArray(pbrSpecularGlossiness.specularFactor)&&params.specular.fromArray(pbrSpecularGlossiness.specularFactor),void 0!==pbrSpecularGlossiness.specularGlossinessTexture){var specGlossIndex=pbrSpecularGlossiness.specularGlossinessTexture.index;pending.push(parser.assignTexture(params,"glossinessMap",specGlossIndex)),pending.push(parser.assignTexture(params,"specularMap",specGlossIndex))}return Promise.all(pending)},createMaterial:function(params){var material=new THREE.ShaderMaterial({defines:params.defines,vertexShader:params.vertexShader,fragmentShader:params.fragmentShader,uniforms:params.uniforms,fog:!0,lights:!0,opacity:params.opacity,transparent:params.transparent});return material.isGLTFSpecularGlossinessMaterial=!0,material.color=params.color,material.map=void 0===params.map?null:params.map,material.lightMap=null,material.lightMapIntensity=1,material.aoMap=void 0===params.aoMap?null:params.aoMap,material.aoMapIntensity=1,material.emissive=params.emissive,material.emissiveIntensity=1,material.emissiveMap=void 0===params.emissiveMap?null:params.emissiveMap,material.bumpMap=void 0===params.bumpMap?null:params.bumpMap,material.bumpScale=1,material.normalMap=void 0===params.normalMap?null:params.normalMap,params.normalScale&&(material.normalScale=params.normalScale),material.displacementMap=null,material.displacementScale=1,material.displacementBias=0,material.specularMap=void 0===params.specularMap?null:params.specularMap,material.specular=params.specular,material.glossinessMap=void 0===params.glossinessMap?null:params.glossinessMap,material.glossiness=params.glossiness,material.alphaMap=null,material.envMap=void 0===params.envMap?null:params.envMap,material.envMapIntensity=1,material.refractionRatio=.98,material.extensions.derivatives=!0,material},cloneMaterial:function(source){var target=source.clone();target.isGLTFSpecularGlossinessMaterial=!0;for(var params=this.specularGlossinessParams,i=0,il=params.length;i<il;i++)target[params[i]]=source[params[i]];return target},refreshUniforms:function(renderer,scene,camera,geometry,material,group){if(!0===material.isGLTFSpecularGlossinessMaterial){var uniforms=material.uniforms,defines=material.defines,uvScaleMap;uniforms.opacity.value=material.opacity,uniforms.diffuse.value.copy(material.color),uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity),uniforms.map.value=material.map,uniforms.specularMap.value=material.specularMap,uniforms.alphaMap.value=material.alphaMap,uniforms.lightMap.value=material.lightMap,uniforms.lightMapIntensity.value=material.lightMapIntensity,uniforms.aoMap.value=material.aoMap,uniforms.aoMapIntensity.value=material.aoMapIntensity,material.map?uvScaleMap=material.map:material.specularMap?uvScaleMap=material.specularMap:material.displacementMap?uvScaleMap=material.displacementMap:material.normalMap?uvScaleMap=material.normalMap:material.bumpMap?uvScaleMap=material.bumpMap:material.glossinessMap?uvScaleMap=material.glossinessMap:material.alphaMap?uvScaleMap=material.alphaMap:material.emissiveMap&&(uvScaleMap=material.emissiveMap),void 0!==uvScaleMap&&(uvScaleMap.isWebGLRenderTarget&&(uvScaleMap=uvScaleMap.texture),!0===uvScaleMap.matrixAutoUpdate&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix)),uniforms.envMap.value=material.envMap,uniforms.envMapIntensity.value=material.envMapIntensity,uniforms.flipEnvMap.value=material.envMap&&material.envMap.isCubeTexture?-1:1,uniforms.refractionRatio.value=material.refractionRatio,uniforms.specular.value.copy(material.specular),uniforms.glossiness.value=material.glossiness,uniforms.glossinessMap.value=material.glossinessMap,uniforms.emissiveMap.value=material.emissiveMap,uniforms.bumpMap.value=material.bumpMap,uniforms.normalMap.value=material.normalMap,uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias,null!==uniforms.glossinessMap.value&&void 0===defines.USE_GLOSSINESSMAP&&(defines.USE_GLOSSINESSMAP="",defines.USE_ROUGHNESSMAP=""),null===uniforms.glossinessMap.value&&void 0!==defines.USE_GLOSSINESSMAP&&(delete defines.USE_GLOSSINESSMAP,delete defines.USE_ROUGHNESSMAP)}}}}function GLTFCubicSplineInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){THREE.Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)}GLTFDracoMeshCompressionExtension.prototype.decodePrimitive=function(primitive,parser){var json=this.json,dracoLoader=this.dracoLoader,bufferViewIndex=primitive.extensions[this.name].bufferView,gltfAttributeMap=primitive.extensions[this.name].attributes,threeAttributeMap={},attributeNormalizedMap={},attributeTypeMap={};for(var attributeName in gltfAttributeMap)attributeName in ATTRIBUTES&&(threeAttributeMap[ATTRIBUTES[attributeName]]=gltfAttributeMap[attributeName]);for(attributeName in primitive.attributes)if(void 0!==ATTRIBUTES[attributeName]&&void 0!==gltfAttributeMap[attributeName]){var accessorDef=json.accessors[primitive.attributes[attributeName]],componentType=WEBGL_COMPONENT_TYPES[accessorDef.componentType];attributeTypeMap[ATTRIBUTES[attributeName]]=componentType,attributeNormalizedMap[ATTRIBUTES[attributeName]]=!0===accessorDef.normalized}return parser.getDependency("bufferView",bufferViewIndex).then((function(bufferView){return new Promise((function(resolve){dracoLoader.decodeDracoFile(bufferView,(function(geometry){for(var attributeName in geometry.attributes){var attribute=geometry.attributes[attributeName],normalized=attributeNormalizedMap[attributeName];void 0!==normalized&&(attribute.normalized=normalized)}resolve(geometry)}),threeAttributeMap,attributeTypeMap)}))}))},GLTFCubicSplineInterpolant.prototype=Object.create(THREE.Interpolant.prototype),GLTFCubicSplineInterpolant.prototype.constructor=GLTFCubicSplineInterpolant,GLTFCubicSplineInterpolant.prototype.copySampleValue_=function(index){for(var result=this.resultBuffer,values=this.sampleValues,valueSize=this.valueSize,offset=index*valueSize*3+valueSize,i=0;i!==valueSize;i++)result[i]=values[offset+i];return result},GLTFCubicSplineInterpolant.prototype.beforeStart_=GLTFCubicSplineInterpolant.prototype.copySampleValue_,GLTFCubicSplineInterpolant.prototype.afterEnd_=GLTFCubicSplineInterpolant.prototype.copySampleValue_,GLTFCubicSplineInterpolant.prototype.interpolate_=function(i1,t0,t,t1){for(var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,stride2=2*stride,stride3=3*stride,td=t1-t0,p=(t-t0)/td,pp=p*p,ppp=pp*p,offset1=i1*stride3,offset0=offset1-stride3,s0=2*ppp-3*pp+1,s1=ppp-2*pp+p,s2=-2*ppp+3*pp,s3=ppp-pp,i=0;i!==stride;i++){var p0=values[offset0+i+stride],m0=values[offset0+i+stride2]*td,p1=values[offset1+i+stride],m1=values[offset1+i]*td;result[i]=s0*p0+s1*m0+s2*p1+s3*m1}return result};var WEBGL_CONSTANTS_FLOAT=5126,WEBGL_CONSTANTS_FLOAT_MAT3=35675,WEBGL_CONSTANTS_FLOAT_MAT4=35676,WEBGL_CONSTANTS_FLOAT_VEC2=35664,WEBGL_CONSTANTS_FLOAT_VEC3=35665,WEBGL_CONSTANTS_FLOAT_VEC4=35666,WEBGL_CONSTANTS_LINEAR=9729,WEBGL_CONSTANTS_REPEAT=10497,WEBGL_CONSTANTS_SAMPLER_2D=35678,WEBGL_CONSTANTS_POINTS=0,WEBGL_CONSTANTS_LINES=1,WEBGL_CONSTANTS_LINE_LOOP=2,WEBGL_CONSTANTS_LINE_STRIP=3,WEBGL_CONSTANTS_TRIANGLES=4,WEBGL_CONSTANTS_TRIANGLE_STRIP=5,WEBGL_CONSTANTS_TRIANGLE_FAN=6,WEBGL_CONSTANTS_UNSIGNED_BYTE=5121,WEBGL_CONSTANTS_UNSIGNED_SHORT=5123,WEBGL_TYPE_5126=Number,WEBGL_TYPE_35675=THREE.Matrix3,WEBGL_TYPE_35676=THREE.Matrix4,WEBGL_TYPE_35664=THREE.Vector2,WEBGL_TYPE_35665=THREE.Vector3,WEBGL_TYPE_35666=THREE.Vector4,WEBGL_TYPE_35678=THREE.Texture,WEBGL_COMPONENT_TYPES={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},WEBGL_FILTERS={9728:THREE.NearestFilter,9729:THREE.LinearFilter,9984:THREE.NearestMipMapNearestFilter,9985:THREE.LinearMipMapNearestFilter,9986:THREE.NearestMipMapLinearFilter,9987:THREE.LinearMipMapLinearFilter},WEBGL_WRAPPINGS={33071:THREE.ClampToEdgeWrapping,33648:THREE.MirroredRepeatWrapping,10497:THREE.RepeatWrapping},WEBGL_SIDES_1028=THREE.BackSide,WEBGL_SIDES_1029=THREE.FrontSide,WEBGL_DEPTH_FUNCS_512=THREE.NeverDepth,WEBGL_DEPTH_FUNCS_513=THREE.LessDepth,WEBGL_DEPTH_FUNCS_514=THREE.EqualDepth,WEBGL_DEPTH_FUNCS_515=THREE.LessEqualDepth,WEBGL_DEPTH_FUNCS_516=THREE.GreaterEqualDepth,WEBGL_DEPTH_FUNCS_517=THREE.NotEqualDepth,WEBGL_DEPTH_FUNCS_518=THREE.GreaterEqualDepth,WEBGL_DEPTH_FUNCS_519=THREE.AlwaysDepth,WEBGL_BLEND_EQUATIONS_32774=THREE.AddEquation,WEBGL_BLEND_EQUATIONS_32778=THREE.SubtractEquation,WEBGL_BLEND_EQUATIONS_32779=THREE.ReverseSubtractEquation,WEBGL_BLEND_FUNCS_0=THREE.ZeroFactor,WEBGL_BLEND_FUNCS_1=THREE.OneFactor,WEBGL_BLEND_FUNCS_768=THREE.SrcColorFactor,WEBGL_BLEND_FUNCS_769=THREE.OneMinusSrcColorFactor,WEBGL_BLEND_FUNCS_770=THREE.SrcAlphaFactor,WEBGL_BLEND_FUNCS_771=THREE.OneMinusSrcAlphaFactor,WEBGL_BLEND_FUNCS_772=THREE.DstAlphaFactor,WEBGL_BLEND_FUNCS_773=THREE.OneMinusDstAlphaFactor,WEBGL_BLEND_FUNCS_774=THREE.DstColorFactor,WEBGL_BLEND_FUNCS_775=THREE.OneMinusDstColorFactor,WEBGL_BLEND_FUNCS_776=THREE.SrcAlphaSaturateFactor,WEBGL_TYPE_SIZES={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},ATTRIBUTES={POSITION:"position",NORMAL:"normal",TEXCOORD_0:"uv",TEXCOORD0:"uv",TEXCOORD:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",COLOR0:"color",COLOR:"color",WEIGHTS_0:"skinWeight",WEIGHT:"skinWeight",JOINTS_0:"skinIndex",JOINT:"skinIndex"},PATH_PROPERTIES={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},INTERPOLATION={CUBICSPLINE:THREE.InterpolateSmooth,LINEAR:THREE.InterpolateLinear,STEP:THREE.InterpolateDiscrete},STATES_ENABLES_2884="CULL_FACE",STATES_ENABLES_2929="DEPTH_TEST",STATES_ENABLES_3042="BLEND",STATES_ENABLES_3089="SCISSOR_TEST",STATES_ENABLES_32823="POLYGON_OFFSET_FILL",STATES_ENABLES_32926="SAMPLE_ALPHA_TO_COVERAGE",ALPHA_MODES_OPAQUE="OPAQUE",ALPHA_MODES_MASK="MASK",ALPHA_MODES_BLEND="BLEND",MIME_TYPE_FORMATS={"image/png":THREE.RGBAFormat,"image/jpeg":THREE.RGBFormat};function resolveURL(url,path){return"string"!=typeof url||""===url?"":/^(https?:)?\/\//i.test(url)?url:/^data:.*,.*$/i.test(url)?url:/^blob:.*$/i.test(url)?url:path+url}function createDefaultMaterial(){return new THREE.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:THREE.FrontSide})}function addUnknownExtensionsToUserData(knownExtensions,object,objectDef){for(var name in objectDef.extensions)void 0===knownExtensions[name]&&(object.userData.gltfExtensions=object.userData.gltfExtensions||{},object.userData.gltfExtensions[name]=objectDef.extensions[name])}function assignExtrasToUserData(object,gltfDef){void 0!==gltfDef.extras&&("object"==typeof gltfDef.extras?object.userData=gltfDef.extras:console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+gltfDef.extras))}function addMorphTargets(geometry,targets,parser){for(var hasMorphPosition=!1,hasMorphNormal=!1,i=0,il=targets.length;i<il;i++){var target;if(void 0!==(target=targets[i]).POSITION&&(hasMorphPosition=!0),void 0!==target.NORMAL&&(hasMorphNormal=!0),hasMorphPosition&&hasMorphNormal)break}if(!hasMorphPosition&&!hasMorphNormal)return Promise.resolve(geometry);for(var pendingPositionAccessors=[],pendingNormalAccessors=[],i=0,il=targets.length;i<il;i++){var target=targets[i];if(hasMorphPosition){var accessor=void 0!==target.POSITION?parser.getDependency("accessor",target.POSITION).then((function(accessor){return cloneBufferAttribute(accessor)})):geometry.attributes.position;pendingPositionAccessors.push(accessor)}if(hasMorphNormal){var accessor=void 0!==target.NORMAL?parser.getDependency("accessor",target.NORMAL).then((function(accessor){return cloneBufferAttribute(accessor)})):geometry.attributes.normal;pendingNormalAccessors.push(accessor)}}return Promise.all([Promise.all(pendingPositionAccessors),Promise.all(pendingNormalAccessors)]).then((function(accessors){for(var morphPositions=accessors[0],morphNormals=accessors[1],i=0,il=targets.length;i<il;i++){var target=targets[i],attributeName="morphTarget"+i;if(hasMorphPosition&&void 0!==target.POSITION){var positionAttribute=morphPositions[i];positionAttribute.name=attributeName;for(var position=geometry.attributes.position,j=0,jl=positionAttribute.count;j<jl;j++)positionAttribute.setXYZ(j,positionAttribute.getX(j)+position.getX(j),positionAttribute.getY(j)+position.getY(j),positionAttribute.getZ(j)+position.getZ(j))}if(hasMorphNormal&&void 0!==target.NORMAL){var normalAttribute=morphNormals[i];normalAttribute.name=attributeName;for(var normal=geometry.attributes.normal,j=0,jl=normalAttribute.count;j<jl;j++)normalAttribute.setXYZ(j,normalAttribute.getX(j)+normal.getX(j),normalAttribute.getY(j)+normal.getY(j),normalAttribute.getZ(j)+normal.getZ(j))}}return hasMorphPosition&&(geometry.morphAttributes.position=morphPositions),hasMorphNormal&&(geometry.morphAttributes.normal=morphNormals),geometry}))}function updateMorphTargets(mesh,meshDef){if(mesh.updateMorphTargets(),void 0!==meshDef.weights)for(var i=0,il=meshDef.weights.length;i<il;i++)mesh.morphTargetInfluences[i]=meshDef.weights[i];if(meshDef.extras&&Array.isArray(meshDef.extras.targetNames)){var targetNames=meshDef.extras.targetNames;if(mesh.morphTargetInfluences.length===targetNames.length){mesh.morphTargetDictionary={};for(var i=0,il=targetNames.length;i<il;i++)mesh.morphTargetDictionary[targetNames[i]]=i}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function isPrimitiveEqual(a,b){return a.indices===b.indices&&isObjectEqual(a.attributes,b.attributes)}function isObjectEqual(a,b){if(Object.keys(a).length!==Object.keys(b).length)return!1;for(var key in a)if(a[key]!==b[key])return!1;return!0}function isArrayEqual(a,b){if(a.length!==b.length)return!1;for(var i=0,il=a.length;i<il;i++)if(a[i]!==b[i])return!1;return!0}function getCachedGeometry(cache,newPrimitive){for(var i=0,il=cache.length;i<il;i++){var cached=cache[i];if(isPrimitiveEqual(cached.primitive,newPrimitive))return cached.promise}return null}function getCachedCombinedGeometry(cache,geometries){for(var i=0,il=cache.length;i<il;i++){var cached=cache[i];if(isArrayEqual(geometries,cached.baseGeometries))return cached.geometry}return null}function getCachedMultiPassGeometry(cache,geometry,primitives){for(var i=0,il=cache.length;i<il;i++){var cached=cache[i];if(geometry===cached.baseGeometry&&isArrayEqual(primitives,cached.primitives))return cached.geometry}return null}function cloneBufferAttribute(attribute){if(attribute.isInterleavedBufferAttribute){for(var count=attribute.count,itemSize=attribute.itemSize,array=attribute.array.slice(0,count*itemSize),i=0;i<count;++i)array[i]=attribute.getX(i),itemSize>=2&&(array[i+1]=attribute.getY(i)),itemSize>=3&&(array[i+2]=attribute.getZ(i)),itemSize>=4&&(array[i+3]=attribute.getW(i));return new THREE.BufferAttribute(array,itemSize,attribute.normalized)}return attribute.clone()}function isMultiPassGeometry(primitives){if(primitives.length<2)return!1;var primitive0=primitives[0],targets0=primitive0.targets||[];if(void 0===primitive0.indices)return!1;for(var i=1,il=primitives.length;i<il;i++){var primitive=primitives[i];if(primitive0.mode!==primitive.mode)return!1;if(void 0===primitive.indices)return!1;if(!isObjectEqual(primitive0.attributes,primitive.attributes))return!1;var targets=primitive.targets||[];if(targets0.length!==targets.length)return!1;for(var j=0,jl=targets0.length;j<jl;j++)if(!isObjectEqual(targets0[j],targets[j]))return!1}return!0}function GLTFParser(json,extensions,options){this.json=json||{},this.extensions=extensions||{},this.options=options||{},this.cache=new GLTFRegistry,this.primitiveCache=[],this.multiplePrimitivesCache=[],this.multiPassGeometryCache=[],this.textureLoader=new THREE.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new THREE.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer")}function addPrimitiveAttributes(geometry,primitiveDef,parser){var attributes=primitiveDef.attributes,pending=[];function assignAttributeAccessor(accessorIndex,attributeName){return parser.getDependency("accessor",accessorIndex).then((function(accessor){geometry.addAttribute(attributeName,accessor)}))}for(var gltfAttributeName in attributes){var threeAttributeName=ATTRIBUTES[gltfAttributeName];threeAttributeName&&(threeAttributeName in geometry.attributes||pending.push(assignAttributeAccessor(attributes[gltfAttributeName],threeAttributeName)))}if(void 0!==primitiveDef.indices&&!geometry.index){var accessor=parser.getDependency("accessor",primitiveDef.indices).then((function(accessor){geometry.setIndex(accessor)}));pending.push(accessor)}return assignExtrasToUserData(geometry,primitiveDef),Promise.all(pending).then((function(){return void 0!==primitiveDef.targets?addMorphTargets(geometry,primitiveDef.targets,parser):geometry}))}return GLTFParser.prototype.parse=function(onLoad,onError){var json=this.json;this.cache.removeAll(),this.markDefs(),this.getMultiDependencies(["scene","animation","camera"]).then((function(dependencies){var scenes=dependencies.scenes||[],scene=scenes[json.scene||0],animations=dependencies.animations||[],cameras=dependencies.cameras||[];onLoad(scene,scenes,cameras,animations,json)})).catch(onError)},GLTFParser.prototype.markDefs=function(){for(var nodeDefs=this.json.nodes||[],skinDefs=this.json.skins||[],meshDefs=this.json.meshes||[],meshReferences={},meshUses={},skinIndex=0,skinLength=skinDefs.length;skinIndex<skinLength;skinIndex++)for(var joints=skinDefs[skinIndex].joints,i=0,il=joints.length;i<il;i++)nodeDefs[joints[i]].isBone=!0;for(var nodeIndex=0,nodeLength=nodeDefs.length;nodeIndex<nodeLength;nodeIndex++){var nodeDef=nodeDefs[nodeIndex];void 0!==nodeDef.mesh&&(void 0===meshReferences[nodeDef.mesh]&&(meshReferences[nodeDef.mesh]=meshUses[nodeDef.mesh]=0),meshReferences[nodeDef.mesh]++,void 0!==nodeDef.skin&&(meshDefs[nodeDef.mesh].isSkinnedMesh=!0))}this.json.meshReferences=meshReferences,this.json.meshUses=meshUses},GLTFParser.prototype.getDependency=function(type,index){var cacheKey=type+":"+index,dependency=this.cache.get(cacheKey);if(!dependency){switch(type){case"scene":dependency=this.loadScene(index);break;case"node":dependency=this.loadNode(index);break;case"mesh":dependency=this.loadMesh(index);break;case"accessor":dependency=this.loadAccessor(index);break;case"bufferView":dependency=this.loadBufferView(index);break;case"buffer":dependency=this.loadBuffer(index);break;case"material":dependency=this.loadMaterial(index);break;case"texture":dependency=this.loadTexture(index);break;case"skin":dependency=this.loadSkin(index);break;case"animation":dependency=this.loadAnimation(index);break;case"camera":dependency=this.loadCamera(index);break;case"light":dependency=this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);break;default:throw new Error("Unknown type: "+type)}this.cache.add(cacheKey,dependency)}return dependency},GLTFParser.prototype.getDependencies=function(type){var dependencies=this.cache.get(type);if(!dependencies){var parser=this,defs=this.json[type+("mesh"===type?"es":"s")]||[];dependencies=Promise.all(defs.map((function(def,index){return parser.getDependency(type,index)}))),this.cache.add(type,dependencies)}return dependencies},GLTFParser.prototype.getMultiDependencies=function(types){for(var results={},pending=[],i=0,il=types.length;i<il;i++){var type=types[i],value=this.getDependencies(type);value=value.then(function(key,value){results[key]=value}.bind(this,type+("mesh"===type?"es":"s"))),pending.push(value)}return Promise.all(pending).then((function(){return results}))},GLTFParser.prototype.loadBuffer=function(bufferIndex){var bufferDef=this.json.buffers[bufferIndex],loader=this.fileLoader;if(bufferDef.type&&"arraybuffer"!==bufferDef.type)throw new Error("THREE.GLTFLoader: "+bufferDef.type+" buffer type is not supported.");if(void 0===bufferDef.uri&&0===bufferIndex)return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);var options=this.options;return new Promise((function(resolve,reject){loader.load(resolveURL(bufferDef.uri,options.path),resolve,void 0,(function(){reject(new Error('THREE.GLTFLoader: Failed to load buffer "'+bufferDef.uri+'".'))}))}))},GLTFParser.prototype.loadBufferView=function(bufferViewIndex){var bufferViewDef=this.json.bufferViews[bufferViewIndex];return this.getDependency("buffer",bufferViewDef.buffer).then((function(buffer){var byteLength=bufferViewDef.byteLength||0,byteOffset=bufferViewDef.byteOffset||0;return buffer.slice(byteOffset,byteOffset+byteLength)}))},GLTFParser.prototype.loadAccessor=function(accessorIndex){var parser=this,json=this.json,accessorDef=this.json.accessors[accessorIndex];if(void 0===accessorDef.bufferView&&void 0===accessorDef.sparse)return null;var pendingBufferViews=[];return void 0!==accessorDef.bufferView?pendingBufferViews.push(this.getDependency("bufferView",accessorDef.bufferView)):pendingBufferViews.push(null),void 0!==accessorDef.sparse&&(pendingBufferViews.push(this.getDependency("bufferView",accessorDef.sparse.indices.bufferView)),pendingBufferViews.push(this.getDependency("bufferView",accessorDef.sparse.values.bufferView))),Promise.all(pendingBufferViews).then((function(bufferViews){var bufferView=bufferViews[0],itemSize=WEBGL_TYPE_SIZES[accessorDef.type],TypedArray=WEBGL_COMPONENT_TYPES[accessorDef.componentType],elementBytes=TypedArray.BYTES_PER_ELEMENT,itemBytes=elementBytes*itemSize,byteOffset=accessorDef.byteOffset||0,byteStride=void 0!==accessorDef.bufferView?json.bufferViews[accessorDef.bufferView].byteStride:void 0,normalized=!0===accessorDef.normalized,array,bufferAttribute;if(byteStride&&byteStride!==itemBytes){var ibCacheKey="InterleavedBuffer:"+accessorDef.bufferView+":"+accessorDef.componentType,ib=parser.cache.get(ibCacheKey);ib||(array=new TypedArray(bufferView),ib=new THREE.InterleavedBuffer(array,byteStride/elementBytes),parser.cache.add(ibCacheKey,ib)),bufferAttribute=new THREE.InterleavedBufferAttribute(ib,itemSize,byteOffset/elementBytes,normalized)}else array=null===bufferView?new TypedArray(accessorDef.count*itemSize):new TypedArray(bufferView,byteOffset,accessorDef.count*itemSize),bufferAttribute=new THREE.BufferAttribute(array,itemSize,normalized);if(void 0!==accessorDef.sparse){var itemSizeIndices=WEBGL_TYPE_SIZES.SCALAR,TypedArrayIndices=WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType],byteOffsetIndices=accessorDef.sparse.indices.byteOffset||0,byteOffsetValues=accessorDef.sparse.values.byteOffset||0,sparseIndices=new TypedArrayIndices(bufferViews[1],byteOffsetIndices,accessorDef.sparse.count*itemSizeIndices),sparseValues=new TypedArray(bufferViews[2],byteOffsetValues,accessorDef.sparse.count*itemSize);null!==bufferView&&bufferAttribute.setArray(bufferAttribute.array.slice());for(var i=0,il=sparseIndices.length;i<il;i++){var index=sparseIndices[i];if(bufferAttribute.setX(index,sparseValues[i*itemSize]),itemSize>=2&&bufferAttribute.setY(index,sparseValues[i*itemSize+1]),itemSize>=3&&bufferAttribute.setZ(index,sparseValues[i*itemSize+2]),itemSize>=4&&bufferAttribute.setW(index,sparseValues[i*itemSize+3]),itemSize>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return bufferAttribute}))},GLTFParser.prototype.loadTexture=function(textureIndex){var parser=this,json=this.json,options=this.options,textureLoader=this.textureLoader,URL=window.URL||window.webkitURL,textureDef=json.textures[textureIndex],textureExtensions=textureDef.extensions||{},source,sourceURI=(source=textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]?json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source]:json.images[textureDef.source]).uri,isObjectURL=!1;return void 0!==source.bufferView&&(sourceURI=parser.getDependency("bufferView",source.bufferView).then((function(bufferView){isObjectURL=!0;var blob=new Blob([bufferView],{type:source.mimeType});return sourceURI=URL.createObjectURL(blob)}))),Promise.resolve(sourceURI).then((function(sourceURI){var loader=THREE.Loader.Handlers.get(sourceURI);return loader||(loader=textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]?parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader:textureLoader),new Promise((function(resolve,reject){loader.load(resolveURL(sourceURI,options.path),resolve,void 0,reject)}))})).then((function(texture){!0===isObjectURL&&URL.revokeObjectURL(sourceURI),texture.flipY=!1,void 0!==textureDef.name&&(texture.name=textureDef.name),source.mimeType in MIME_TYPE_FORMATS&&(texture.format=MIME_TYPE_FORMATS[source.mimeType]);var samplers,sampler=(json.samplers||{})[textureDef.sampler]||{};return texture.magFilter=WEBGL_FILTERS[sampler.magFilter]||THREE.LinearFilter,texture.minFilter=WEBGL_FILTERS[sampler.minFilter]||THREE.LinearMipMapLinearFilter,texture.wrapS=WEBGL_WRAPPINGS[sampler.wrapS]||THREE.RepeatWrapping,texture.wrapT=WEBGL_WRAPPINGS[sampler.wrapT]||THREE.RepeatWrapping,texture}))},GLTFParser.prototype.assignTexture=function(materialParams,textureName,textureIndex){return this.getDependency("texture",textureIndex).then((function(texture){materialParams[textureName]=texture}))},GLTFParser.prototype.loadMaterial=function(materialIndex){var parser=this,json=this.json,extensions=this.extensions,materialDef=json.materials[materialIndex],materialType,materialParams={},materialExtensions=materialDef.extensions||{},pending=[];if(materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var sgExtension=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];materialType=sgExtension.getMaterialType(materialDef),pending.push(sgExtension.extendParams(materialParams,materialDef,this))}else if(materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]){var kmuExtension=extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];materialType=kmuExtension.getMaterialType(materialDef),pending.push(kmuExtension.extendParams(materialParams,materialDef,this))}else{materialType=THREE.MeshStandardMaterial;var metallicRoughness=materialDef.pbrMetallicRoughness||{};if(materialParams.color=new THREE.Color(1,1,1),materialParams.opacity=1,Array.isArray(metallicRoughness.baseColorFactor)){var array=metallicRoughness.baseColorFactor;materialParams.color.fromArray(array),materialParams.opacity=array[3]}if(void 0!==metallicRoughness.baseColorTexture&&pending.push(this.assignTexture(materialParams,"map",metallicRoughness.baseColorTexture.index)),materialParams.metalness=void 0!==metallicRoughness.metallicFactor?metallicRoughness.metallicFactor:1,materialParams.roughness=void 0!==metallicRoughness.roughnessFactor?metallicRoughness.roughnessFactor:1,void 0!==metallicRoughness.metallicRoughnessTexture){var textureIndex=metallicRoughness.metallicRoughnessTexture.index;pending.push(this.assignTexture(materialParams,"metalnessMap",textureIndex)),pending.push(this.assignTexture(materialParams,"roughnessMap",textureIndex))}}!0===materialDef.doubleSided&&(materialParams.side=THREE.DoubleSide);var alphaMode=materialDef.alphaMode||ALPHA_MODES_OPAQUE;return alphaMode===ALPHA_MODES_BLEND?materialParams.transparent=!0:(materialParams.transparent=!1,alphaMode===ALPHA_MODES_MASK&&(materialParams.alphaTest=void 0!==materialDef.alphaCutoff?materialDef.alphaCutoff:.5)),void 0!==materialDef.normalTexture&&materialType!==THREE.MeshBasicMaterial&&(pending.push(this.assignTexture(materialParams,"normalMap",materialDef.normalTexture.index)),materialParams.normalScale=new THREE.Vector2(1,1),void 0!==materialDef.normalTexture.scale&&materialParams.normalScale.set(materialDef.normalTexture.scale,materialDef.normalTexture.scale)),void 0!==materialDef.occlusionTexture&&materialType!==THREE.MeshBasicMaterial&&(pending.push(this.assignTexture(materialParams,"aoMap",materialDef.occlusionTexture.index)),void 0!==materialDef.occlusionTexture.strength&&(materialParams.aoMapIntensity=materialDef.occlusionTexture.strength)),void 0!==materialDef.emissiveFactor&&materialType!==THREE.MeshBasicMaterial&&(materialParams.emissive=(new THREE.Color).fromArray(materialDef.emissiveFactor)),void 0!==materialDef.emissiveTexture&&materialType!==THREE.MeshBasicMaterial&&pending.push(this.assignTexture(materialParams,"emissiveMap",materialDef.emissiveTexture.index)),Promise.all(pending).then((function(){var material;return material=materialType===THREE.ShaderMaterial?extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams):new materialType(materialParams),void 0!==materialDef.name&&(material.name=materialDef.name),material.normalScale&&(material.normalScale.y=-material.normalScale.y),material.map&&(material.map.encoding=THREE.sRGBEncoding),material.emissiveMap&&(material.emissiveMap.encoding=THREE.sRGBEncoding),material.specularMap&&(material.specularMap.encoding=THREE.sRGBEncoding),assignExtrasToUserData(material,materialDef),materialDef.extensions&&addUnknownExtensionsToUserData(extensions,material,materialDef),material}))},GLTFParser.prototype.loadGeometries=function(primitives){var parser=this,extensions=this.extensions,cache=this.primitiveCache,isMultiPass=isMultiPassGeometry(primitives),originalPrimitives;isMultiPass&&(originalPrimitives=primitives,primitives=[primitives[0]]);for(var pending=[],i=0,il=primitives.length;i<il;i++){var primitive=primitives[i],cached=getCachedGeometry(cache,primitive),geometryPromise;if(cached)pending.push(cached);else geometryPromise=primitive.extensions&&primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]?extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive,parser).then((function(geometry){return addPrimitiveAttributes(geometry,primitive,parser)})):addPrimitiveAttributes(new THREE.BufferGeometry,primitive,parser),cache.push({primitive:primitive,promise:geometryPromise}),pending.push(geometryPromise)}return Promise.all(pending).then((function(geometries){if(isMultiPass){var baseGeometry=geometries[0],cache,cached;if(null!==(cached=getCachedMultiPassGeometry(cache=parser.multiPassGeometryCache,baseGeometry,originalPrimitives)))return[cached.geometry];var geometry=new THREE.BufferGeometry;for(var key in geometry.name=baseGeometry.name,geometry.userData=baseGeometry.userData,baseGeometry.attributes)geometry.addAttribute(key,baseGeometry.attributes[key]);for(var key in baseGeometry.morphAttributes)geometry.morphAttributes[key]=baseGeometry.morphAttributes[key];for(var pendingIndices=[],i=0,il=originalPrimitives.length;i<il;i++)pendingIndices.push(parser.getDependency("accessor",originalPrimitives[i].indices));return Promise.all(pendingIndices).then((function(accessors){for(var indices=[],offset=0,i=0,il=originalPrimitives.length;i<il;i++){for(var accessor=accessors[i],j=0,jl=accessor.count;j<jl;j++)indices.push(accessor.array[j]);geometry.addGroup(offset,accessor.count,i),offset+=accessor.count}return geometry.setIndex(indices),cache.push({geometry:geometry,baseGeometry:baseGeometry,primitives:originalPrimitives}),[geometry]}))}if(geometries.length>1&&void 0!==THREE.BufferGeometryUtils){for(var i=1,il=primitives.length;i<il;i++)if(primitives[0].mode!==primitives[i].mode)return geometries;var cache,cached;if(cached=getCachedCombinedGeometry(cache=parser.multiplePrimitivesCache,geometries)){if(null!==cached.geometry)return[cached.geometry]}else{var geometry=THREE.BufferGeometryUtils.mergeBufferGeometries(geometries,!0);if(cache.push({geometry:geometry,baseGeometries:geometries}),null!==geometry)return[geometry]}}return geometries}))},GLTFParser.prototype.loadMesh=function(meshIndex){for(var parser=this,json=this.json,extensions=this.extensions,meshDef=json.meshes[meshIndex],primitives=meshDef.primitives,pending=[],i=0,il=primitives.length;i<il;i++){var material=void 0===primitives[i].material?createDefaultMaterial():this.getDependency("material",primitives[i].material);pending.push(material)}return Promise.all(pending).then((function(originalMaterials){return parser.loadGeometries(primitives).then((function(geometries){for(var isMultiMaterial=1===geometries.length&&geometries[0].groups.length>0,meshes=[],i=0,il=geometries.length;i<il;i++){var geometry=geometries[i],primitive=primitives[i],mesh,material=isMultiMaterial?originalMaterials:originalMaterials[i];if(primitive.mode===WEBGL_CONSTANTS_TRIANGLES||primitive.mode===WEBGL_CONSTANTS_TRIANGLE_STRIP||primitive.mode===WEBGL_CONSTANTS_TRIANGLE_FAN||void 0===primitive.mode)mesh=!0===meshDef.isSkinnedMesh?new THREE.SkinnedMesh(geometry,material):new THREE.Mesh(geometry,material),primitive.mode===WEBGL_CONSTANTS_TRIANGLE_STRIP?mesh.drawMode=THREE.TriangleStripDrawMode:primitive.mode===WEBGL_CONSTANTS_TRIANGLE_FAN&&(mesh.drawMode=THREE.TriangleFanDrawMode);else if(primitive.mode===WEBGL_CONSTANTS_LINES)mesh=new THREE.LineSegments(geometry,material);else if(primitive.mode===WEBGL_CONSTANTS_LINE_STRIP)mesh=new THREE.Line(geometry,material);else if(primitive.mode===WEBGL_CONSTANTS_LINE_LOOP)mesh=new THREE.LineLoop(geometry,material);else{if(primitive.mode!==WEBGL_CONSTANTS_POINTS)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+primitive.mode);mesh=new THREE.Points(geometry,material)}Object.keys(mesh.geometry.morphAttributes).length>0&&updateMorphTargets(mesh,meshDef),mesh.name=meshDef.name||"mesh_"+meshIndex,geometries.length>1&&(mesh.name+="_"+i),assignExtrasToUserData(mesh,meshDef),meshes.push(mesh);for(var materials=isMultiMaterial?mesh.material:[mesh.material],useVertexColors=void 0!==geometry.attributes.color,useFlatShading=void 0===geometry.attributes.normal,useSkinning=!0===mesh.isSkinnedMesh,useMorphTargets=Object.keys(geometry.morphAttributes).length>0,useMorphNormals=useMorphTargets&&void 0!==geometry.morphAttributes.normal,j=0,jl=materials.length;j<jl;j++){var material=materials[j];if(mesh.isPoints){var cacheKey="PointsMaterial:"+material.uuid,pointsMaterial=parser.cache.get(cacheKey);pointsMaterial||(pointsMaterial=new THREE.PointsMaterial,THREE.Material.prototype.copy.call(pointsMaterial,material),pointsMaterial.color.copy(material.color),pointsMaterial.map=material.map,pointsMaterial.lights=!1,parser.cache.add(cacheKey,pointsMaterial)),material=pointsMaterial}else if(mesh.isLine){var cacheKey="LineBasicMaterial:"+material.uuid,lineMaterial=parser.cache.get(cacheKey);lineMaterial||(lineMaterial=new THREE.LineBasicMaterial,THREE.Material.prototype.copy.call(lineMaterial,material),lineMaterial.color.copy(material.color),lineMaterial.lights=!1,parser.cache.add(cacheKey,lineMaterial)),material=lineMaterial}if(useVertexColors||useFlatShading||useSkinning||useMorphTargets){var cacheKey="ClonedMaterial:"+material.uuid+":";material.isGLTFSpecularGlossinessMaterial&&(cacheKey+="specular-glossiness:"),useSkinning&&(cacheKey+="skinning:"),useVertexColors&&(cacheKey+="vertex-colors:"),useFlatShading&&(cacheKey+="flat-shading:"),useMorphTargets&&(cacheKey+="morph-targets:"),useMorphNormals&&(cacheKey+="morph-normals:");var cachedMaterial=parser.cache.get(cacheKey);cachedMaterial||(cachedMaterial=material.isGLTFSpecularGlossinessMaterial?extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(material):material.clone(),useSkinning&&(cachedMaterial.skinning=!0),useVertexColors&&(cachedMaterial.vertexColors=THREE.VertexColors),useFlatShading&&(cachedMaterial.flatShading=!0),useMorphTargets&&(cachedMaterial.morphTargets=!0),useMorphNormals&&(cachedMaterial.morphNormals=!0),parser.cache.add(cacheKey,cachedMaterial)),material=cachedMaterial}materials[j]=material,material.aoMap&&void 0===geometry.attributes.uv2&&void 0!==geometry.attributes.uv&&(console.log("THREE.GLTFLoader: Duplicating UVs to support aoMap."),geometry.addAttribute("uv2",new THREE.BufferAttribute(geometry.attributes.uv.array,2))),material.isGLTFSpecularGlossinessMaterial&&(mesh.onBeforeRender=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms)}mesh.material=isMultiMaterial?materials:materials[0]}if(1===meshes.length)return meshes[0];for(var group=new THREE.Group,i=0,il=meshes.length;i<il;i++)group.add(meshes[i]);return group}))}))},GLTFParser.prototype.loadCamera=function(cameraIndex){var camera,cameraDef=this.json.cameras[cameraIndex],params=cameraDef[cameraDef.type];if(params)return"perspective"===cameraDef.type?camera=new THREE.PerspectiveCamera(THREE.Math.radToDeg(params.yfov),params.aspectRatio||1,params.znear||1,params.zfar||2e6):"orthographic"===cameraDef.type&&(camera=new THREE.OrthographicCamera(params.xmag/-2,params.xmag/2,params.ymag/2,params.ymag/-2,params.znear,params.zfar)),void 0!==cameraDef.name&&(camera.name=cameraDef.name),assignExtrasToUserData(camera,cameraDef),Promise.resolve(camera);console.warn("THREE.GLTFLoader: Missing camera parameters.")},GLTFParser.prototype.loadSkin=function(skinIndex){var skinDef=this.json.skins[skinIndex],skinEntry={joints:skinDef.joints};return void 0===skinDef.inverseBindMatrices?Promise.resolve(skinEntry):this.getDependency("accessor",skinDef.inverseBindMatrices).then((function(accessor){return skinEntry.inverseBindMatrices=accessor,skinEntry}))},GLTFParser.prototype.loadAnimation=function(animationIndex){for(var json,animationDef=this.json.animations[animationIndex],pendingNodes=[],pendingInputAccessors=[],pendingOutputAccessors=[],pendingSamplers=[],pendingTargets=[],i=0,il=animationDef.channels.length;i<il;i++){var channel=animationDef.channels[i],sampler=animationDef.samplers[channel.sampler],target=channel.target,name=void 0!==target.node?target.node:target.id,input=void 0!==animationDef.parameters?animationDef.parameters[sampler.input]:sampler.input,output=void 0!==animationDef.parameters?animationDef.parameters[sampler.output]:sampler.output;pendingNodes.push(this.getDependency("node",name)),pendingInputAccessors.push(this.getDependency("accessor",input)),pendingOutputAccessors.push(this.getDependency("accessor",output)),pendingSamplers.push(sampler),pendingTargets.push(target)}return Promise.all([Promise.all(pendingNodes),Promise.all(pendingInputAccessors),Promise.all(pendingOutputAccessors),Promise.all(pendingSamplers),Promise.all(pendingTargets)]).then((function(dependencies){for(var nodes=dependencies[0],inputAccessors=dependencies[1],outputAccessors=dependencies[2],samplers=dependencies[3],targets=dependencies[4],tracks=[],i=0,il=nodes.length;i<il;i++){var node=nodes[i],inputAccessor=inputAccessors[i],outputAccessor=outputAccessors[i],sampler=samplers[i],target=targets[i];if(void 0!==node){var TypedKeyframeTrack;switch(node.updateMatrix(),node.matrixAutoUpdate=!0,PATH_PROPERTIES[target.path]){case PATH_PROPERTIES.weights:TypedKeyframeTrack=THREE.NumberKeyframeTrack;break;case PATH_PROPERTIES.rotation:TypedKeyframeTrack=THREE.QuaternionKeyframeTrack;break;case PATH_PROPERTIES.position:case PATH_PROPERTIES.scale:default:TypedKeyframeTrack=THREE.VectorKeyframeTrack}var targetName=node.name?node.name:node.uuid,interpolation=void 0!==sampler.interpolation?INTERPOLATION[sampler.interpolation]:THREE.InterpolateLinear,targetNames=[];PATH_PROPERTIES[target.path]===PATH_PROPERTIES.weights?node.traverse((function(object){!0===object.isMesh&&object.morphTargetInfluences&&targetNames.push(object.name?object.name:object.uuid)})):targetNames.push(targetName);for(var j=0,jl=targetNames.length;j<jl;j++){var track=new TypedKeyframeTrack(targetNames[j]+"."+PATH_PROPERTIES[target.path],THREE.AnimationUtils.arraySlice(inputAccessor.array,0),THREE.AnimationUtils.arraySlice(outputAccessor.array,0),interpolation);"CUBICSPLINE"===sampler.interpolation&&(track.createInterpolant=function InterpolantFactoryMethodGLTFCubicSpline(result){return new GLTFCubicSplineInterpolant(this.times,this.values,this.getValueSize()/3,result)},track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),tracks.push(track)}}}var name=void 0!==animationDef.name?animationDef.name:"animation_"+animationIndex;return new THREE.AnimationClip(name,void 0,tracks)}))},GLTFParser.prototype.loadNode=function(nodeIndex){var json=this.json,extensions=this.extensions,parser=this,meshReferences=json.meshReferences,meshUses=json.meshUses,nodeDef=json.nodes[nodeIndex];return new Promise((function(resolve){!0===nodeDef.isBone?resolve(new THREE.Bone):void 0!==nodeDef.mesh?parser.getDependency("mesh",nodeDef.mesh).then((function(mesh){var node;if(meshReferences[nodeDef.mesh]>1){var instanceNum=meshUses[nodeDef.mesh]++;(node=mesh.clone()).name+="_instance_"+instanceNum,node.onBeforeRender=mesh.onBeforeRender;for(var i=0,il=node.children.length;i<il;i++)node.children[i].name+="_instance_"+instanceNum,node.children[i].onBeforeRender=mesh.children[i].onBeforeRender}else node=mesh;resolve(node)})):void 0!==nodeDef.camera?parser.getDependency("camera",nodeDef.camera).then(resolve):nodeDef.extensions&&nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL]&&void 0!==nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light?parser.getDependency("light",nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light).then(resolve):resolve(new THREE.Object3D)})).then((function(node){if(void 0!==nodeDef.name&&(node.name=THREE.PropertyBinding.sanitizeNodeName(nodeDef.name)),assignExtrasToUserData(node,nodeDef),nodeDef.extensions&&addUnknownExtensionsToUserData(extensions,node,nodeDef),void 0!==nodeDef.matrix){var matrix=new THREE.Matrix4;matrix.fromArray(nodeDef.matrix),node.applyMatrix(matrix)}else void 0!==nodeDef.translation&&node.position.fromArray(nodeDef.translation),void 0!==nodeDef.rotation&&node.quaternion.fromArray(nodeDef.rotation),void 0!==nodeDef.scale&&node.scale.fromArray(nodeDef.scale);return node}))},GLTFParser.prototype.loadScene=function(){function buildNodeHierachy(nodeId,parentObject,json,parser){var nodeDef=json.nodes[nodeId];return parser.getDependency("node",nodeId).then((function(node){return void 0===nodeDef.skin?node:parser.getDependency("skin",nodeDef.skin).then((function(skin){for(var pendingJoints=[],i=0,il=(skinEntry=skin).joints.length;i<il;i++)pendingJoints.push(parser.getDependency("node",skinEntry.joints[i]));return Promise.all(pendingJoints)})).then((function(jointNodes){for(var meshes=!0===node.isGroup?node.children:[node],i=0,il=meshes.length;i<il;i++){for(var mesh=meshes[i],bones=[],boneInverses=[],j=0,jl=jointNodes.length;j<jl;j++){var jointNode=jointNodes[j];if(jointNode){bones.push(jointNode);var mat=new THREE.Matrix4;void 0!==skinEntry.inverseBindMatrices&&mat.fromArray(skinEntry.inverseBindMatrices.array,16*j),boneInverses.push(mat)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',skinEntry.joints[j])}mesh.bind(new THREE.Skeleton(bones,boneInverses),mesh.matrixWorld)}return node}));var skinEntry})).then((function(node){parentObject.add(node);var pending=[];if(nodeDef.children)for(var children=nodeDef.children,i=0,il=children.length;i<il;i++){var child=children[i];pending.push(buildNodeHierachy(child,node,json,parser))}return Promise.all(pending)}))}return function loadScene(sceneIndex){var json=this.json,extensions=this.extensions,sceneDef=this.json.scenes[sceneIndex],parser=this,scene=new THREE.Scene;void 0!==sceneDef.name&&(scene.name=sceneDef.name),assignExtrasToUserData(scene,sceneDef),sceneDef.extensions&&addUnknownExtensionsToUserData(extensions,scene,sceneDef);for(var nodeIds=sceneDef.nodes||[],pending=[],i=0,il=nodeIds.length;i<il;i++)pending.push(buildNodeHierachy(nodeIds[i],scene,json,this));return Promise.all(pending).then((function(){return scene}))}}(),GLTFLoader}();